#!/usr/bin/env ruby
#
# BioRuby bio-gfastqc Plugin BioGfastqc
# Author:: Raoul Jean Pierre Bonnal
# Copyright:: 2015
require 'json'
require 'base64'
require 'yaml'
require 'optparse'
require 'ostruct'
require 'zip'
require 'erb'
# Copyright 2015, Raoul Jean Pierre Bonnal <bonnal@ingm.org>
# This scripts reads and input file in YAML format followint
# the specification from pipengine for samples
# generates a single comprehesive html page with a summary for
# all the Quality Control data generated by FASTQC


USAGE = "Describe bio-gfastqc"

gempath = File.dirname(File.dirname(__FILE__))
$: << File.join(gempath,'lib')

VERSION_FILENAME=File.join(gempath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

# print banner
print "bio-gfastqc #{version} by Raoul Jean Pierre Bonnal 2015\n"

if ARGV.size == 0
  print USAGE
end

require 'bio-gfastqc'

# Uncomment when using the bio-logger 
# require 'bio-logger'
# Bio::Log::CLI.logger('stderr')
# Bio::Log::CLI.trace('info')



class OptHandlingBox
  def  self.parse(args)
    options = OpenStruct.new
    options.config = 'config.yml'
    options.step = ''

    opt_parser =  OptionParser.new do |opts|
      opts.banner = 'Usage: qc_overview.rb '

      opts.on('-c', '--config [config]',
              'choose the config from get info about the samples') do |config|
        options.config = config
      end

      opts.on('-p', '--pipengine',
              'if you used pipengine to produce the fastqc result is better to use this option. gfastqc will look into the output directory specified in the sample.yml') do
        options.pipengine = true
      end

      opts.on('-g', '--groups',
              'if you specified groups in your configuration file, select this option') do
        options.groups = true
      end

      opts.on('-s', '--step [STEP]',
              'choose the step from which extract the fastqc data') do |step|
        options.step = step
      end

      opts.on('-a', '--first [FIRST]',
              'forward strand reads') do |first|
        options.first = first
      end

      opts.on('-b', '--second [SECOND]',
              'reverse strand reads') do |second|
        options.second = second
      end

      opts.on('-n', '--usename',
              'use sample name to build the path (maybe later implement placeholding like pipengine') do
        options.usename = true
      end


      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end #opt_parse

    opt_parser.parse!(args)
    options
  end #parse
end #class OptGtfSplit










options = OptHandlingBox.parse(ARGV)

@gfastqc = Bio::GFASTQC.new(options)






# File.open('test.json','w') do |file|
#   file.write data.to_json
# end

@gfastqc.type_images = %w(kmer_profiles per_sequence_gc_content per_base_sequence_content duplication_levels sequence_length_distribution per_sequence_quality per_base_quality adapter_content per_base_n_content per_tile_quality)
@gfastqc.type_tables = %w(Adapter_Content Basic_Statistics Kmer_Content Overrepresented_sequences Per_base_N_content Per_base_sequence_content Per_base_sequence_quality Per_sequence_quality_scores Sequence_Duplication_Levels Sequence_Length_Distribution)
# dropped tables to avoid wast of space or not so informative:
# Per_sequence_GC_content Overrepresented_sequences Per_tile_sequence_quality 
# Overrepresented_sequences temporary removed it seems that when this fields pass the test there are no data associated with


# puts @gfastqc.inspect

erb_file = 'index.html.erb'

html_file = File.basename(erb_file, '.erb') #=>"page.html"

erb_str = File.read(File.join(File.dirname(__FILE__),'../lib/bio-gfastqc',erb_file))

renderer = ERB.new(erb_str)
result = renderer.result()

File.open(html_file, 'w') do |f|
  f.write(result)
end

puts "Your comprehensive quality control file is ready in the current directory #{File.join(Dir.pwd,'index.html')}"


